- name: provision_os_hosts
  hosts: localhost
  gather_facts: false
  connection: local
  strategy: free
  pre_tasks:
    - name: include_cloud_init_var
      include_vars:
        file: cloud_inits/cloud_init_ubuntu2004.yaml
  vars:
    metal_project_id: 9c419265-c12d-4dc4-9240-98962691b939
    metal_faciltiy: fr2
    metal_metro: fr
    metal_os_vlan: 2335
    metal_api_token: "{{ lookup('env', 'METAL_API_TOKEN') }}"

  tasks:
    - name: provision_osc_host
      equinix.metal.device:
        project_id: "{{ metal_project_id }}"
        hostnames: osc%02d
        tags: osc,openstack,os
        operating_system: ubuntu_20_04
        plan: "c3.small.x86"
        facility: "{{ metal_faciltiy }}"
        user_data: "{{ ubuntu_user_data }}"
        wait_for_public_IPv: 4
      register: new_metal_hosts_osc
    - name: provision_osw_host
      equinix.metal.device:
        project_id: "{{ metal_project_id }}"
        hostnames: osw%02d
        tags: osw,openstack,os
        count: 1
        operating_system: ubuntu_20_04
        plan: "c3.small.x86"
        facility: "{{ metal_faciltiy }}"
        user_data: "{{ ubuntu_user_data }}"
        wait_for_public_IPv: 4
      register: new_metal_hosts_osw
    # This play is happening on localhost
    # so we cant wait_for remote path
    # re-swizzle this to wait for cloud-init to finish
    # or just move all of cloud-init to ansible
    - name:  provision_osc_wait_for_ssh
      ansible.builtin.wait_for:
        delay: 1
        host: "{{ item.public_ipv4 }}"
        port: 22
        state: started
        timeout: 500
      with_items: "{{ new_metal_hosts_osc.devices }}"
    - name:  provision_osw_wait_for_ssh
      ansible.builtin.wait_for:
        delay: 1
        host: "{{ item.public_ipv4 }}"
        port: 22
        state: started
        timeout: 500
      with_items: "{{ new_metal_hosts_osw.devices }}"


    # VLAN Work, we do the same work for both OSC / OSW, this could be made lists with_items
    - name: provision_os_metal_vlan
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{metal_project_id}}/virtual-networks
        method: POST
        headers:
          X-Auth-Token: "{{ metal_api_token }}"
        body_format: json
        body:
          metro: "{{ metal_metro }}"
          vxlan: "{{ metal_os_vlan }}"
          description: "metal_openstack"
        status_code: [201, 422]
    # OSC
    - name: provision_os_osc_hosts_retrieve_isntance_details
      uri:
        url: https://api.equinix.com/metal/v1/devices/{{new_metal_hosts_osc.devices[0].id}}
        method: GET
        headers:
          X-Auth-Token: "{{ metal_api_token }}"
        return_content: yes
        status_code: 200
      register: new_metal_hosts_osc_api_data

    - name: provision_os_osc_hosts_attach_metal_vlan
      uri:
        url: https://api.equinix.com/metal/v1/ports/{{new_metal_hosts_osc_api_data.json.network_ports[0].id}}/assign
        method: POST
        headers:
          X-Auth-Token: "{{ metal_api_token }}"
        body_format: json
        body:
          vnid: "{{ metal_os_vlan }}"
        status_code: [200, 422]

      # OSW
    - name: provision_os_osw_hosts_retrieve_isntance_details
      uri:
        url: https://api.equinix.com/metal/v1/devices/{{new_metal_hosts_osw.devices[0].id}}
        method: GET
        headers:
          X-Auth-Token: "{{ metal_api_token }}"
        return_content: yes
        status_code: 200
      register: new_metal_hosts_osw_api_data

    - name: provision_os_osw_hosts_attach_metal_vlan
      uri:
        url: https://api.equinix.com/metal/v1/ports/{{new_metal_hosts_osw_api_data.json.network_ports[0].id}}/assign
        method: POST
        headers:
          X-Auth-Token: "{{ metal_api_token }}"
        body_format: json
        body:
          vnid: "{{ metal_os_vlan }}"
        status_code: [200, 422]
