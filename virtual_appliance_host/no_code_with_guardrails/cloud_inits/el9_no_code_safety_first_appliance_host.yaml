#cloud-config
package_upgrade: true
package_reboot_if_required: true
datasource:
  Ec2:
    apply_full_imds_network_config: false
    strict_id: false
ssh:
  emit_keys_to_console: false
no_ssh_fingerprints: false
packages:
  - iperf3
  - tmux
  - firewalld
  - jq
  - vim
  - nc
  - git
  - nfs-utils
  - dnf-automatic
  - dnf-plugins-core
  - unzip
  - virt-manager
  - libvirt-client
  - virt-install
  - libvirt
  - qemu-kvm
  - qemu-img
  - libguestfs
  - net-tools
  - wget
  - nginx
  - bind-utils
  - cockpit
  - cockpit-machines
  - cockpit-storaged
  - cockpit-podman
  - cockpit-system
  - cockpit-bridge
  - cockpit-pcp
  - cockpit-packagekit
groups:
  - cloud-users
  - export-users
  - sudo
users:
  - name: adminuser
    primary_group: cloud-users
    groups:
      - cloud-users
      - wheel
      - sudo
      - export-users
    #sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
bootcmd:
  - systemctl disable --now kdump || true
  - systemctl disable --now sshd || true
  - mkdir -p /var/tmp/ncb/etc
  - mkdir /var/tmp/ncb/bin
  - mkdir /var/tmp/ncb/tmp
runcmd:
  - - systemctl
    - enable
    - --now
    - firewalld
  - - firewall-cmd
    - --permanent
    - --zone=public
    - --set-target=DROP
  - - firewall-cmd
    - --permanent
    - --zone=public
    - --add-service=ssh
  - - firewall-cmd
    - --permanent
    - --zone=public
    - --add-service=http
  - - firewall-cmd
    - --permanent
    - --zone=public
    - --add-service=cockpit
  - - firewall-cmd
    - --permanent
    - --zone=external
    - --add-service=ssh
  - - firewall-cmd
    - --permanent
    - --zone=external
    - --add-service=http
  - - firewall-cmd
    - --permanent
    - --zone=external
    - --add-service=cockpit
  - - firewall-cmd
    - --permanent
    - --zone=trusted
    - --add-source=10.0.0.0/8
  - - firewall-cmd
    - --permanent
    - --zone=trusted
    - --add-source=172.16.100.0/24
  - - firewall-cmd
    - --permanent
    - --zone=trusted
    - --add-source=192.168.101.0/24
  - - firewall-cmd
    - --permanent
    - --zone=trusted
    - --add-port=81/tcp
  - - firewall-cmd
    - --permanent
    - --zone=trusted
    - --add-port=83/tcp
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-port=82/tcp
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-source=172.16.253.0/24
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-source=192.168.252.0/24
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-source=172.16.251.0/24
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-source=192.168.250.0/24
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-source=172.16.249.0/24
  - - firewall-cmd
    - --permanent
    - --zone=internal
    - --add-source=192.168.248.0/24
  - - firewall-cmd
    - --permanent
    - --new-policy
    - trust2NAT
  - - firewall-cmd
    - --permanent
    - --policy
    - trust2NAT
    - --add-ingress-zone
    - trusted
  - - firewall-cmd
    - --permanent
    - --policy
    - trust2NAT
    - --add-egress-zone
    - external
  - - firewall-cmd
    - --permanent
    - --policy
    - trust2NAT
    - --set-target
    - ACCEPT
  - - firewall-cmd
    - --reload
  - - authselect
    - select
    - minimal
    - with-faillock
    - --force
  - - modprobe
    - 8021q
  - - rsync
    - -av
    - /root/.ssh
    - /home/adminuser/
  - - chown
    - -R
    - adminuser:cloud-users
    - /home/adminuser/.ssh
  - - sed
    - -i
    - -e
    - /^#PermitRootLogin/s/^.*$/PermitRootLogin no/
    - /etc/ssh/sshd_config
  - - sed
    - -i
    - -e
    - /^#MaxAuthTries/s/^.*$/MaxAuthTries 5/
    - /etc/ssh/sshd_config
  - - sed
    - -i
    - -e
    - /^X11Forwarding/s/^.*$/X11Forwarding no/
    - /etc/ssh/sshd_config
  - - sed
    - -i
    - -e
    - /^apply_updates/s/^.*$/apply_updates = yes/
    - /etc/dnf/automatic.conf
  - - bash
    - /var/tmp/ncb/bin/ncb_adminuser_mangle.sh
  - - bash
    - /var/tmp/ncb/bin/ncb_build_env_file.sh
  - - bash
    - /var/tmp/ncb/bin/ncb_network_mangle.sh
  - - bash
    - /var/tmp/ncb/bin/ncb_disk_mangle.sh
  - - bash
    - /var/tmp/ncb/bin/ncb_dnsmasq_mangle.sh
  - - bash
    - /var/tmp/ncb/bin/ncb_nginx_mangle.sh
  - - systemctl
    - daemon-reload
  - - systemctl
    - enable
    - --now
    - dnf-automatic.timer
  - - systemctl
    - enable
    - --now
    - podman
  - - systemctl
    - enable
    - --now
    - libvirtd
  - - systemctl
    - enable
    - --now
    - nfs-server
  - - systemctl
    - enable
    - --now
    - pmlogger.service
  - - systemctl
    - enable
    - --now
    - ncb_podman_setcap_fix
  - - systemctl
    - enable
    - --now
    - ncb_dev_shm_forget
  - - systemctl
    - enable
    - --now
    - ncb_update_ncb_extended_env.timer
  - - systemctl
    - enable
    - --now
    - cockpit
  - - bash
    - /var/tmp/ncb/bin/ncb_libvirt_mangle.sh
  - - systemctl
    - unmask
    - sshd
  - - systemctl
    - enable
    - --now
    - sshd
write_files:
  - path: /etc/modules-load.d/networking.conf
    permissions: "0644"
    owner: root:root
    append: true
    content: |
      8021q
  - path: /etc/dnf/dnf.conf
    permissions: "0644"
    owner: root:root
    append: true
    content: |
      max_parallel_downloads=10
      fastestmirror=True
  - path: /etc/security/faillock.conf
    permissions: "0644"
    owner: root:root
    append: true
    content: |
      deny=4
      unlock_time=300
      audit
      even_deny_root
      root_unlock_time=60
  - path: /etc/crontab
    owner: root:root
    append: true
    content: |
      05 11 * * * root systemctl restart sshd
      10 11 * * * root systemctl restart cockpit.service
      15 11 * * * root systemctl restart serial-getty@ttyS1.service
      20 11 * * * root systemctl restart getty@tty1.service
      20 11 * * * root systemctl restart nginx.service
      25 11 * * * root rm -rf /dev/shm/forget/*
    permissions: "0644"
  - path: /etc/exports
    permissions: "0644"
    owner: root:root
    append: false
    content: >
      /mnt/util/export/ 10.0.0.0/8(rw,async,no_subtree_check)

      /mnt/util/export/ 172.16.100.0/24(rw,async,no_subtree_check)

      /mnt/util/export/ 192.168.101.0/24(rw,async,no_subtree_check)

      /mnt/util/export/nfs1 172.16.253.0/24(rw,async,no_subtree_check)

      /mnt/util/export/nfs1 192.168.252.0/24(rw,async,no_subtree_check)

      /mnt/util/export/tftp 172.16.100.0/24(rw,async,no_subtree_check,no_root_squash)
  - path: /var/tmp/ncb/etc/ncb_raw.env
    permissions: "0644"
    owner: root:root
    append: false
    content: |
      export M_JSON=/tmp/metadata
      export M_DNS1=147.75.207.207
      export M_DNS2=147.75.208.208
      export MGMT_A_VLANID=3880
      export MGMT_A_NET=172.16.100.0
      export MGMT_A_CIDR=/24
      export MGMT_B_VLANID=3780
      export MGMT_B_NET=192.168.101.0
      export MGMT_B_CIDR=/24
      export STOR_A_VLANID=3870
      export STOR_A_NET=172.16.253.0
      export STOR_A_CIDR=/24
      export STOR_B_VLANID=3770
      export STOR_B_NET=192.168.252.0
      export STOR_B_CIDR=/24
      export LOCA_A_VLANID=3860
      export LOCA_A_NET=172.16.251.0
      export LOCA_A_CIDR=/24
      export LOCA_B_VLANID=3760
      export LOCA_B_NET=192.168.250.0
      export LOCA_B_CIDR=/24
      export INTE_A_VLANID=3850
      export INTE_A_NET=172.16.249.0
      export INTE_A_CIDR=/24
      export INTE_B_VLANID=3750
      export INTE_B_NET=192.168.248.0
      export INTE_B_CIDR=/24
  - path: /var/tmp/ncb/bin/ncb_build_env_file.sh
    owner: root:root
    append: false
    content: >
      logger "running /var/tmp/ncb/bin/ncb_build_env_file.sh"

      source /var/tmp/ncb/etc/ncb_raw.env

      cp -f /var/tmp/ncb/etc/ncb_raw.env /var/tmp/ncb/etc/ncb.env


      HOST_IP_END=$(hostname | awk -F "-" '{print$NF}' | sed 's/^0*//')


      echo "#HOST_IP_END is how this host will end networks like 172.16.100.$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_END=$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      curl -s https://metadata.platformequinix.com/metadata -o /tmp/metadata


      M_PUBL_IP=$(jq -r '.network.addresses[] | select((.public==true) and .address_family==4) | .address' /tmp/metadata)

      M_PUBL_CIDR=$(jq -r '.network.addresses[] | select((.public==true) and .address_family==4) | "\/"+(.cidr|tostring)' /tmp/metadata)

      M_PUBL_GW=$(jq -r '.network.addresses[] | select((.public==true) and .address_family==4) | .gateway' /tmp/metadata)

      echo "export M_PUBL_IP=$M_PUBL_IP" >> /var/tmp/ncb/etc/ncb.env

      echo "export M_PUBL_CIDR=$M_PUBL_CIDR" >> /var/tmp/ncb/etc/ncb.env

      echo "export M_PUBL_GW=$M_PUBL_GW" >> /var/tmp/ncb/etc/ncb.env


      M_PRIV_IP=$(jq -r '.network.addresses[] | select((.public==false) and .address_family==4) | .address' /tmp/metadata)

      M_PRIV_CIDR=$(jq -r '.network.addresses[] | select((.public==false) and .address_family==4) | "\/"+(.cidr|tostring)' /tmp/metadata)

      M_PRIV_GW=$(jq -r '.network.addresses[] | select((.public==false) and .address_family==4) | .gateway' /tmp/metadata)

      echo "export M_PRIV_IP=$M_PRIV_IP" >> /var/tmp/ncb/etc/ncb.env

      echo "export M_PRIV_CIDR=$M_PRIV_CIDR" >> /var/tmp/ncb/etc/ncb.env

      echo "export M_PRIV_GW=$M_PRIV_GW" >> /var/tmp/ncb/etc/ncb.env

      echo "export HTTP_PROXY=${M_PRIV_IP}:83" >> /var/tmp/ncb/etc/ncb.env

      echo "NO_PROXY=127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $MGMT_A_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export MGMT_A_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_MGMT_A=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $MGMT_B_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export MGMT_B_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_MGMT_B=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $STOR_A_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export STOR_A_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_STOR_A=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $STOR_B_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export STOR_B_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_STOR_B=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $LOCA_A_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export LOCA_A_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_LOCA_A=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $LOCA_B_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export LOCA_B_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_LOCA_B=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $INTE_A_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export INTE_A_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_INTE_A=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      STRING_SCRATCH=$(echo $INTE_B_NET | awk -F '.' '{print$1"."$2"."$3"."}')

      echo "export INTE_B_NET_STRIP=$STRING_SCRATCH" >> /var/tmp/ncb/etc/ncb.env

      echo "export HOST_IP_INTE_B=$STRING_SCRATCH$HOST_IP_END" >> /var/tmp/ncb/etc/ncb.env


      chmod 0400 /var/tmp/ncb/bin/ncb_build_env_file.sh
  - path: /var/tmp/ncb/bin/ncb_adminuser_mangle.sh
    owner: root:root
    append: false
    content: |
      logger "running /var/tmp/ncb/bin/ncb_adminuser_mangle.sh"
      pwhash=$(sudo getent shadow root | cut -d: -f2)
      sudo usermod -p $pwhash adminuser
      usermod -a -G export-users root
      mkdir /home/adminuser/bin
      chown -R adminuser:cloud-users /home/adminuser/bin
      chmod 0400 /var/tmp/ncb/bin/ncb_adminuser_mangle.sh
    permissions: "0644"
  - path: /etc/systemd/system/ncb_podman_setcap_fix.service
    owner: root:root
    append: false
    content: >
      [Unit]

      Description=ncb_podman_setcap_fix

      After=multi-user.target

      [Service]

      Type=idle

      ExecStart=/bin/bash -c "setcap cap_setuid+ep /usr/bin/newuidmap && setcap cap_setgid+ep /usr/bin/newgidmap"
    permissions: "0655"
  - path: /etc/systemd/system/ncb_dev_shm_forget.service
    owner: root:root
    append: false
    content: >
      [Unit]

      Description=ncb_dev_shm_forget

      After=multi-user.target

      [Service]

      Type=idle

      ExecStart=/bin/bash -c "mkdir /dev/shm/forget && chown adminuser:cloud-users /dev/shm/forget"
  - path: /etc/systemd/system/ncb_update_ncb_extended_env.service
    owner: root:root
    append: false
    content: >
      [Unit]

      Description=ncb_update_ncb_extended_env

      After=multi-user.target

      [Service]

      Type=idle

      ExecStart=/bin/bash /var/tmp/ncb/bin/ncb_update_ncb_extended_env.sh
      [Install]
      WantedBy=timers.target
  - path: /etc/systemd/system/ncb_update_ncb_extended_env.timer
    owner: root:root
    append: false
    content: |
      [Unit]

      Description=run every 2 miutes ncb_update_ncb_extended_env

      [Timer]
      OnBootSec=2min
      OnUnitActiveSec=2min
      Persistent=true

      [Install]
      WantedBy=timers.target
  - path: /var/tmp/ncb/bin/ncb_update_ncb_extended_env.sh
    owner: root:root
    append: false
    content: |
      #!/bin/bash

      logger "starting /var/tmp/ncb/bin/ncb_update_ncv_extended_env.sh"

      curl -s https://metadata.platformequinix.com/metadata -o /tmp/.metadata_update
      rm /tmp/.ncb_extended.env
      touch /tmp/.ncb_extended.env

      TAGS=$(jq -r '.tags[]' /tmp/.metadata_update)
      for TAG in $TAGS; do
          echo $TAG
          echo "export TAG_"${TAG}"=PRESENT" >> /tmp/.ncb_extended.env
          if [ "$TAG" = "ncb_k3s" ]; then
            if test ! -f /var/tmp/ncb/tmp/ncb_k3s_mangle.done; then
              systemctl enable --now ncb_k3s_mangle.timer
            fi
          fi
      done

      mv /tmp/.ncb_extended.env /var/tmp/ncb/etc/ncb_extended.env

      rm /tmp/.metadata_update
  - path: /etc/systemd/system/ncb_k3s_mangle.service
    owner: root:root
    append: false
    content: >
      [Unit]

      Description=ncb_k3s_mangle

      After=multi-user.target

      [Service]

      Type=idle

      ExecStart=/bin/bash /var/tmp/ncb/bin/ncb_k3s_mangle.sh
      [Install]
      WantedBy=timers.target
  - path: /etc/systemd/system/ncb_k3s_mangle.timer
    owner: root:root
    append: false
    content: |
      [Unit]

      Description=run every 2 miutes ncb_k3s_mangle

      [Timer]
      OnBootSec=2min
      OnUnitActiveSec=2min
      Persistent=true

      [Install]
      WantedBy=timers.target
  - path: /var/tmp/ncb/bin/ncb_k3s_mangle.sh
    owner: root:root
    append: false
    content: |
      #!/bin/bash

      source /var/tmp/ncb/etc/ncb.env
      source /var/tmp/ncb/etc/ncb_extended.env

      if test -f /var/tmp/ncb/tmp/ncb_k3s_mangle.done; then
        systemctl disable --now ncb_k3s_mangle.timer
        systemctl disable ncb_k3s_mangle.service
        exit 0
      elif [ "$TAG_ncb_k3s" != "PRESENT" ]; then
        exit 0
      fi

      curl -sfL https://get.k3s.io | NO_PROXY=127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16  HTTP_PROXY=${M_PRIV_IP}:83 INSTALL_K3S_EXEC="--advertise-address ${HOST_IP_MGMT_A} --bind-address ${HOST_IP_MGMT_A}" sh -

      firewall-cmd --permanent --add-port=6443/tcp --zone=internal

      firewall-cmd --reload

      if test ! -f /var/tmp/ncb/tmp/kubectl.sha256; then
        curl -o /var/tmp/ncb/tmp/kubectl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -o /var/tmp/ncb/tmp/kubectl.sha256 -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        curl -o /var/tmp/ncb/tmp/clusterctl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.5.2/clusterctl-linux-amd64
        curl -o /var/tmp/ncb/tmp/cert-manager.yaml -LO https://github.com/cert-manager/cert-manager/releases/download/v1.13.1/cert-manager.yaml

      fi

      KCHKSUM=$(echo "$(cat /var/tmp/ncb/tmp/kubectl.sha256)  /var/tmp/ncb/tmp/kubectl" | sha256sum --check | awk '{print $NF}')
      if [ "$KCHKSUM" = "OK" ]; then
        echo "kubectl installed"
      else
        logger "SHA256 of kubectl in admiunuser home is wrong, exiting"
        exit 1
      fi

      #HARDCODED CHECKSUMS ARE BAD OKAY?!
      CCHKSUM=$(echo "4ae1a8fd5699e1926efbfd2fa7ee7272c8171348ca817255c950a6c4cffc7cb2  /var/tmp/ncb/tmp/clusterctl" | sha256sum --check | awk '{print $NF}')
      if [ "$CCHKSUM" = "OK" ]; then
        echo "clusterctl installed"
      else
        logger "SHA256 of clusterctl in /var/tmp/ncb/tmp is wrong, exiting"
      fi

      CMCHKSUM=$(echo "8b2a77bf9d2fe569d0c3bfd74f19dad0c8e675e9f6a7e88060abee3042f50a12  /var/tmp/ncb/tmp/cert-manager.yaml" | sha256sum --check | awk '{print $NF}')
      if [ "$CMCHKSUM" = "OK" ]; then
        echo "cert-manager.yaml installed"
      else
        logger "SHA256 of cert-manager.yaml in /var/tmp/ncb/tmp is wrong, exiting"
        exit 1
      fi


      sudo -u adminuser cp /var/tmp/ncb/tmp/kubectl /home/adminuser/bin/
      sudo -u adminuser cp /var/tmp/ncb/tmp/clusterctl /home/adminuser/bin/

      sudo -u adminuser chmod 0750 /home/adminuser/bin/kubectl
      sudo -u adminuser chmod 0750 /home/adminuser/bin/clusterctl

      rm -rf /tmp/.kube
      mkdir /tmp/.kube
      cp /etc/rancher/k3s/k3s.yaml /tmp/.kube/config
      chmod 0600 /tmp/.kube/config
      cp -r /tmp/.kube /home/adminuser/
      chown -R adminuser:cloud-users /home/adminuser/.kube
      sudo -u adminuser cp /var/tmp/ncb/tmp/cert-manager.yaml /home/adminuser/.kube/

      sudo -i -u adminuser kubectl apply -f /home/adminuser/.kube/cert-manager.yaml

      systemctl disable --now ncb_k3s_mangle.timer

      touch /var/tmp/ncb/tmp/ncb_k3s_mangle.done

    permissions: "0655"
  - path: /var/tmp/ncb/bin/ncb_dnsmasq_mangle.sh
    owner: root:root
    append: false
    content: >
      logger "running /var/tmp/ncb/bin/ncb_dnsmasq_mangle.sh"

      mkdir -p mkdir /var/tmp/ncb/etc/dnsmasq.d/hostsdir

      source /var/tmp/ncb/etc/ncb.env

      cat > /etc/dnsmasq.conf << EOL

      expand-hosts
      domain-needed
      bogus-priv
      dns-forward-max=150
      cache-size=19968
      neg-ttl=60
      no-poll
      log-queries
      log-dhcp
      log-facility=/var/log/dnsmasq.log
      server=192.168.122.1
      server=$M_DNS1
      server=$M_DNS2

      domain=mgmta.gtst.local,$MGMT_A_NET$MGMT_A_CIDR,local
      synth-domain=mgmta.gtst.local,$MGMT_A_NET$MGMT_A_CIDR,host-*
      synth-domain=mgmtb.gtst.local,$MGMT_B_NET$MGMT_B_CIDR,host-*

      address=/$HOSTNAME.mgmta.gtst.local/$HOST_IP_MGMT_A
      address=/$HOSTNAME.mgmta.gtst.local/$HOST_IP_MGMT_B


      interface=mbr0.mgmt_a
      interface=mbr0.mgmt_b
      bind-interfaces
      listen-address=$HOST_IP_MGMT_A
      listen-address=$HOST_IP_MGMT_B
      listen-address=127.0.0.1
      listen-address=$M_PRIV_IP
      conf-dir=/etc/dnsmasq.d/
      log-debug

      EOL


      if [[ "$HOST_IP_END" == 1 ]]; then

      cat > /etc/dnsmasq.d/dhcp_dnsmasq.conf << EOL

      no-dhcp-interface=bond0
      no-dhcp-interface=mbr0.mgmt_b
      dhcp-authoritative
      dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases
      dhcp-range=${MGMT_A_NET_STRIP}140,${MGMT_A_NET_STRIP}220,365d
      dhcp-option=option:router,$HOST_IP_MGMT_A
      dhcp-option=option:dns-server,$HOST_IP_MGMT_A
      dhcp-option=option:domain-name,mgmta.gtst.local
      dhcp-option=option:domain-search,mgmta.gtst.local
      dhcp-option=option:mtu,9000
      dhcp-option=2,0

      dhcp-hostsdir=/var/tmp/ncb/etc/dnsmasq.d/hostsdir

      dhcp-boot=tag:pxeinstall,tftptarget.file,$HOST_IP_MGMT_A
      dhcp-option=tag:pxeinstall,option:root-path,"tftp://$HOST_IP_MGMT_A/"

      # Expiremental, catching UEFI HTTP boot
      # dhcp-vendorclass=set:httpclient,HTTPClient
      # dhcp-option=tag:httpclient,option:bootfile-name,"http://172.16.100.31:81/loader.efi">
      tftp-no-blocksize
      tftp-no-fail
      tftp-mtu=1200
      enable-tftp
      tftp-root=/mnt/util/export/tftp

      EOL

      fi

      systemctl enable --now dnsmasq.service

      nmcli connection modify mbr0 ipv4.dns "127.0.0.1,$M_PRIV_IP,$HOST_IP_MGMT_A"

      nmcli con up mbr0

      chmod 0400 /var/tmp/ncb/bin/ncb_dnsmasq_mangle.sh
    permissions: "0655"
  - path: /var/tmp/ncb/bin/ncb_nginx_mangle.sh
    owner: root:root
    append: false
    content: |
      logger "running /var/tmp/ncb/bin/ncb_nginx_mangle.sh"
      usermod -a -G export-users nginx
      source /var/tmp/ncb/etc/ncb.env
      curl -s https://metadata.platformequinix.com/metadata -o /tmp/metadata

      mkdir -p /mnt/util/export/html/autoindex
      echo "private network" > /mnt/util/export/index.html
      echo "private network html audotindex" > /mnt/util/export/html/index.html
      cat > /etc/nginx/conf.d/ncb_private.conf << EOL
        server {
            listen       $M_PRIV_IP:81;
            listen       localhost:81;
            listen       $HOST_IP_MGMT_A:81;
            listen       $HOST_IP_MGMT_B:81;
            server_name  _;
            root         /mnt/util/export/;

            # Load configuration files for the default server block.
            include /etc/nginx/default.d/*.conf;

            location = / {
                index index.html;
            }
        }
        server {
            listen       $M_PRIV_IP:82;
            listen       localhost:82;
            listen       $HOST_IP_MGMT_A:82;
            listen       $HOST_IP_MGMT_B:82;
            listen       $HOST_IP_STOR_A:82;
            listen       $HOST_IP_STOR_B:82;
            listen       $HOST_IP_LOCA_A:82;
            listen       $HOST_IP_LOCA_B:82;
            listen       $HOST_IP_INTE_A:82;
            listen       $HOST_IP_INTE_B:82;
            server_name  _;
            root         /mnt/util/export/html/;

            # Load configuration files for the default server block.
            include /etc/nginx/default.d/*.conf;

            location = / {
                index index.html;
            }
            location ~ /autoindex/(.*) {
              autoindex on;
            }
        }
      EOL
      cat > /etc/nginx/conf.d/ncb_http_forward_proxy.conf << EOL
        server {
            listen       $M_PRIV_IP:83;
            listen       localhost:83;
            listen       $HOST_IP_MGMT_A:83;
            listen       $HOST_IP_MGMT_B:83;
            server_name  _;
      	    location / {
                resolver $M_DNS1;
                proxy_pass http://\$http_host\$uri\$is_args\$args;
            }
        }
      EOL
      systemctl enable --now nginx
      systemctl restart nginx
      chmod 0400 /var/tmp/ncb/bin/ncb_nginx_mangle.sh
    permissions: "0644"
  - path: /var/tmp/ncb/bin/ncb_libvirt_mangle.sh
    owner: root:root
    append: false
    content: >
      logger "running /var/tmp/ncb/bin/ncb_libvirt_mangle.sh"

      source /var/tmp/ncb/etc/ncb.env

      cat > /var/tmp/ncb/tmp/metal_libvirt_network_dnsmasq.xml << EOL
        <network xmlns:dnsmasq='http://libvirt.org/schemas/network/dnsmasq/1.0'>
          <name>default</name>
          <uuid>38a47335-4455-4c57-8eab-73e84bc6b409</uuid>
          <forward mode='nat'>
            <nat>
              <port start='1024' end='65535'/>
            </nat>
          </forward>
          <bridge name='virbr0' stp='on' delay='0'/>
          <mac address='52:54:00:7f:45:20'/>
          <ip address='192.168.122.1' netmask='255.255.255.0'>
            <dhcp>
              <range start='192.168.122.2' end='192.168.122.254'/>
            </dhcp>
          </ip>
          <dnsmasq:options>
            <dnsmasq:option value='listen-address=192.168.122.1'/>
            <dnsmasq:option value='synth-domain=libvirt.gtst.local,192.168.122.0/24,host-*'/>
            <dnsmasq:option value='domain=libvirt.gtst.local,192.168.122.0/24,local/'>
            <dnsmasq:option value='interface=virbr0'/>
            <dnsmasq:option value='server=127.0.0.1'/>
          </dnsmasq:options>
        </network>
      EOL

      virsh net-destroy default

      virsh net-undefine default

      sleep 1

      sync

      virsh net-define /var/tmp/ncb/tmp/metal_libvirt_network_dnsmasq.xml

      virsh net-start --network default

      mkdir -p /mnt/util/vms

      virsh pool-destroy default

      virsh pool-undefine default

      cat > /var/tmp/ncb/tmp/metal_storage_pool.xml << EOL
        <pool type="dir">
            <name>default</name>
            <target>
                  <path>/mnt/util/vms</path>
            </target>
        </pool>
      EOL

      virsh pool-define /var/tmp/ncb/tmp/metal_storage_pool.xml

      virsh pool-autostart default

      virsh pool-start default

      chmod 0400 /var/tmp/ncb/bin/ncb_libvirt_mangle.sh
    permissions: "0644"
  - path: /var/tmp/ncb/bin/ncb_disk_mangle.sh
    owner: root:root
    append: false
    content: >
      logger "running /var/tmp/ncb/bin/ncb_disk_mangle.sh"

      mkdir -p /mnt/util

      BOOT_DRIVE=$(cat /proc/mounts | grep "/dev/sd" | awk '{print$1}' | awk -F "/dev/" '{print$2}' | cut -c 1-3)

      DRIVE=$(lsblk --bytes -o name,rota,type,size | grep -v "$BOOT_DRIVE" | grep -v "zram" | grep -v " 1 " | grep disk | awk '{print$4,$1}' | sort -r -n  | head -1 | awk '{print$2}')

      sgdisk --zap-all /dev/$DRIVE

      mkfs.xfs -f /dev/$DRIVE

      sync

      sleep 2

      sync

      DRIVE_UUID=$(ls -al /dev/disk/by-uuid/ | grep $DRIVE | awk '{print$9}')

      cat > /etc/systemd/system/mnt-util.mount << EOL

      [Unit]

      Description=ncb-mount-util-drive (/mnt/util)

      DefaultDependencies=no

      Conflicts=umount.target

      Before=local-fs.target umount.target nfs-server.service

      After=swap.target

      [Mount]

      What=/dev/disk/by-uuid/$DRIVE_UUID

      Where=/mnt/util

      Type=xfs

      Options=defaults

      [Install]

      WantedBy=multi-user.target


      EOL


      systemctl daemon-reload

      systemctl start mnt-util.mount

      sync

      sleep 1

      mkdir -p /mnt/util/export/nfs1

      mkdir /mnt/util/export/tftp

      chown -R adminuser:export-users /mnt/util/export

      chmod -R 755 /mnt/util/export/tftp

      chmod 0400 /var/tmp/ncb/bin/ncb_disk_mangle.sh
    permissions: "0644"
  - path: /var/tmp/ncb/bin/ncb_network_mangle.sh
    owner: root:root
    append: false
    content: >
      logger "running /var/tmp/ncb/bin/ncb_network_mangle.sh"

      source /var/tmp/ncb/etc/ncb.env


      NUM_INTERFACES=$(ip link list up | grep SLAVE | grep BROADCAST | wc -l)


      if [[ "$NUM_INTERFACES" == 4 ]]; then
          FIRST_INTERFACE=$(ip link list up | grep SLAVE | grep BROADCAST | grep -v "enp0s20f0u9" | awk 'NR==1' | awk '{print$2}' | tr -d "\:")
          SECOND_INTERFACE=$(ip link list up | grep SLAVE | grep BROADCAST | grep -v "enp0s20f0u9" | awk 'NR==3' | awk '{print$2}' | tr -d "\:")
      else
          FIRST_INTERFACE=$(ip link list up | grep SLAVE | grep BROADCAST | grep -v "enp0s20f0u9" | awk 'NR==1' | awk '{print$2}' | tr -d "\:")
          SECOND_INTERFACE=$(ip link list up | grep SLAVE | grep BROADCAST | grep -v "enp0s20f0u9" | awk 'NR==2' | awk '{print$2}' | tr -d "\:")
      fi


      nmcli connection delete bond0

      nmcli connection delete "System $FIRST_INTERFACE"

      nmcli connection delete "System $SECOND_INTERFACE"

      nmcli connection delete "System eth0"

      nmcli connection delete "eth0"

      rm -rf /etc/sysconfig/network-scripts/*

      nmcli connection add type bridge ifname mbr0 con-name mbr0 ipv4.method manual ipv4.never-default true  ipv4.addresses $M_PUBL_IP$M_PUBL_CIDR ipv4.gateway $M_PUBL_GW ipv4.dns '147.75.207.207,147.75.207.208,127.0.0.1'  ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli connection modify mbr0 +ipv4.addresses $M_PRIV_IP$M_PRIV_CIDR

      nmcli connection modify mbr0 +ipv4.routes "$M_PRIV_GW$M_PRIV_CIDR $M_PRIV_GW"

      nmcli connection modify mbr0 +ipv4.routes "10.0.0.0/8 $M_PRIV_GW"

      nmcli connection add type bond ifname bond0 con-name bond0 bond.options  "mode=802.3ad,miimon=100,lacp_rate=slow,updelay=5000,xmit_hash_policy=layer3+4" ipv4.method disabled  ipv4.never-default true ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000

      nmcli con modify bond0 master mbr0 slave-type bridge

      nmcli connection add type ethernet slave-type bond con-name bond0-port0 ifname $FIRST_INTERFACE master bond0 802-3-ethernet.mtu 9000

      nmcli connection add type ethernet slave-type bond con-name bond0-port1 ifname $SECOND_INTERFACE master bond0 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0 connection.zone external

      nmcli con up bond0

      sleep 2

      nmcli con up mbr0

      sleep 2

      nmcli connection add type bridge ifname mbr0.mgmt_a con-name mbr0.mgmt_a ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_MGMT_A$MGMT_A_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.mgmt_a

      nmcli con add type vlan con-name bond0.$MGMT_A_VLANID ifname bond0.$MGMT_A_VLANID dev bond0 id $MGMT_A_VLANID

      nmcli con modify bond0.$MGMT_A_VLANID master mbr0.mgmt_a slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify bond0.$MGMT_A_VLANID connection.zone trusted

      nmcli connection modify mbr0.mgmt_a connection.zone trusted

      nmcli con up bond0.$MGMT_A_VLANID


      nmcli connection add type bridge ifname mbr0.mgmt_b con-name mbr0.mgmt_b ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_MGMT_B$MGMT_B_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.mgmt_b

      nmcli con add type vlan con-name bond0.$MGMT_B_VLANID ifname bond0.$MGMT_B_VLANID dev bond0 id $MGMT_B_VLANID

      nmcli con modify bond0.$MGMT_B_VLANID master mbr0.mgmt_b slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify bond0.$MGMT_B_VLANID connection.zone trusted

      nmcli connection modify mbr0.mgmt_b connection.zone trusted

      nmcli con up bond0.$MGMT_B_VLANID


      nmcli connection add type bridge ifname mbr0.stor_a con-name mbr0.stor_a ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_STOR_A$STOR_A_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.stor_a

      nmcli con add type vlan con-name bond0.$STOR_A_VLANID ifname bond0.$STOR_A_VLANID dev bond0 id $STOR_A_VLANID

      nmcli con modify bond0.$STOR_A_VLANID master mbr0.stor_a slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0.stor_a connection.zone internal

      nmcli con up bond0.$STOR_A_VLANID


      nmcli connection add type bridge ifname mbr0.stor_b con-name mbr0.stor_b ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_STOR_B$STOR_B_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.stor_b

      nmcli con add type vlan con-name bond0.$STOR_B_VLANID ifname bond0.$STOR_B_VLANID dev bond0 id $STOR_B_VLANID

      nmcli con modify bond0.$STOR_B_VLANID master mbr0.stor_b slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0.stor_b connection.zone internal

      nmcli con up bond0.$STOR_B_VLANID


      nmcli connection add type bridge ifname mbr0.loca_a con-name mbr0.loca_a ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_LOCA_A$LOCA_A_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.loca_a

      nmcli con add type vlan con-name bond0.$LOCA_A_VLANID ifname bond0.$LOCA_A_VLANID dev bond0 id $LOCA_A_VLANID

      nmcli con modify bond0.$LOCA_A_VLANID master mbr0.loca_a slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0.loca_a connection.zone internal

      nmcli con up bond0.$LOCA_A_VLANID


      nmcli connection add type bridge ifname mbr0.loca_b con-name mbr0.loca_b ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_LOCA_B$LOCA_B_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.loca_b

      nmcli con add type vlan con-name bond0.$LOCA_B_VLANID ifname bond0.$LOCA_B_VLANID dev bond0 id $LOCA_B_VLANID

      nmcli con modify bond0.$LOCA_B_VLANID master mbr0.loca_b slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0.loca_b connection.zone internal

      nmcli con up bond0.$LOCA_B_VLANID


      nmcli connection add type bridge ifname mbr0.inte_a con-name mbr0.inte_a ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_INTE_A$INTE_A_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.inte_a

      nmcli con add type vlan con-name bond0.$INTE_A_VLANID ifname bond0.$INTE_A_VLANID dev bond0 id $INTE_A_VLANID

      nmcli con modify bond0.$INTE_A_VLANID master mbr0.inte_a slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0.inte_a connection.zone internal

      nmcli con up bond0.$INTE_A_VLANID

      nmcli connection add type bridge ifname mbr0.inte_b con-name mbr0.inte_b ipv4.method manual ipv4.never-default true ipv4.addresses $HOST_IP_INTE_B$INTE_B_CIDR ipv6.method ignore ipv6.never-default true 802-3-ethernet.mtu 9000 bridge.stp no

      nmcli con up mbr0.inte_b

      nmcli con add type vlan con-name bond0.$INTE_B_VLANID ifname bond0.$INTE_B_VLANID dev bond0 id $INTE_B_VLANID

      nmcli con modify bond0.$INTE_B_VLANID master mbr0.inte_b slave-type bridge 802-3-ethernet.mtu 9000

      nmcli connection modify mbr0.inte_b connection.zone internal

      nmcli con up bond0.$INTE_B_VLANID

      sed -i "/net.ipv4.ip_forward=1/ s/# *//" /etc/sysctl.conf

      #sed -i "/net.ipv6.conf.all.forwarding=1/ s/# *//" /etc/sysctl.conf

      sysctl -p

      firewall-cmd --permanent --add-rich-rule 'rule service name="ssh" accept limit value="20/m"'

      #firewall-cmd --permanent --add-rich-rule 'rule service name="cockpit" accept limit value="2000/m"'

      firewall-cmd --reload

      chmod 0400 /var/tmp/ncb/bin/ncb_network_mangle.sh
    permissions: "0644"
